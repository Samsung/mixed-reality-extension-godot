[gd_scene load_steps=13 format=2]

[ext_resource path="res://Toolkit/ToolkitText.tscn" type="PackedScene" id=1]
[ext_resource path="res://Toolkit/PressableButtonGodot.cs" type="Script" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled, blend_add, ambient_light_disabled;

uniform float thickness = 0.01;
uniform float smoothness = 0.01;
uniform vec3 border_color = vec3(0.42, 0.48, 0.61);
uniform mat4 clipBoxInverseTransform;

varying vec3 v;

float PointVsBox(vec3 worldPosition, mat4 boxInverseTransform)
{
   vec3 distance = abs(boxInverseTransform * vec4(worldPosition, 1.0)).xyz;
   return 1.0 - step(1.0001, max(distance.x, max(distance.y, distance.z)));
}

uniform sampler2D texture_transmission : hint_white;
void vertex() {
	v = VERTEX;
}

void fragment() {
	float a = smoothstep(thickness, thickness + smoothness, length(abs(v.xy) - 0.5));
	a *= smoothstep(thickness, thickness + smoothness, length(abs(v.yz) - 0.5));
	a *= smoothstep(thickness, thickness + smoothness, length(abs(v.xz) - 0.5));

	vec3 global_vertex = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;

	ALBEDO = border_color;
	ALPHA *= mix(0.7, 0, a) * PointVsBox(global_vertex, clipBoxInverseTransform);
	TRANSMISSION = texture(texture_transmission, UV).rgb;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/thickness = 0.01
shader_param/smoothness = 0.01
shader_param/border_color = Vector3( 0.42, 0.48, 0.61 )
shader_param/clipBoxInverseTransform = null

[sub_resource type="CubeMesh" id=3]
size = Vector3( 1, 1, 1 )

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,ambient_light_disabled;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float pulse_delta = -1;
uniform float border = 0.02;
uniform vec3 border_color = vec3(0);//vec3(0.42f, 0.48f, 0.61f);
uniform mat4 clipBoxInverseTransform;

float PointVsBox(vec3 worldPosition, mat4 boxInverseTransform)
{
   vec3 distance = abs(boxInverseTransform * vec4(worldPosition, 1.0)).xyz;
   return 1.0 - step(1.0001, max(distance.x, max(distance.y, distance.z)));
}

float roundedBoxSDF(vec2 CenterPosition, vec2 Size, float Radius)
{
	return length(max(abs(CenterPosition) - Size + Radius, 0.0)) - Radius;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float edgeSoftness = 0.005;
	float radius = 0.02;
	float thickness = 0.01;
	float distance = roundedBoxSDF(UV - 0.5, vec2(0.49), radius);
	float smmothedAlpha = 1f - smoothstep(-edgeSoftness, edgeSoftness, abs(distance) - thickness);
	EMISSION = mix(vec4(0f, 0f, 0f, 1f), vec4(border_color, smmothedAlpha), smmothedAlpha).xyz;

	vec3 global_vertex = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;
	ALPHA_SCISSOR = 1.0;
	ALPHA = PointVsBox(global_vertex, clipBoxInverseTransform);
}

void light() {
	DIFFUSE_LIGHT = mix(vec3(0), ATTENUATION, step(pulse_delta, -ATTENUATION));
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = null
shader_param/pulse_delta = -1.0
shader_param/border = 0.02
shader_param/border_color = Vector3( 0, 0, 0 )
shader_param/clipBoxInverseTransform = null

[sub_resource type="QuadMesh" id=6]

[sub_resource type="BoxShape" id=7]
extents = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode unshaded;

uniform vec4 color: hint_color = vec4(0.086f, 0.2f, 0.5f, 1f);
uniform float border = 0.02;
uniform mat4 clipBoxInverseTransform;

float PointVsBox(vec3 worldPosition, mat4 boxInverseTransform)
{
   vec3 distance = abs(boxInverseTransform * vec4(worldPosition, 1.0)).xyz;
   return 1.0 - step(1.0001, max(distance.x, max(distance.y, distance.z)));
}

float roundedBoxSDF(vec2 CenterPosition, vec2 Size, float Radius)
{
	return length(max(abs(CenterPosition) - Size + Radius, 0.0)) - Radius;
}

void fragment()
{
	float edgeSoftness = 0.005;
	float radius = 0.02;
	float thickness = 0.01;
	float distance = roundedBoxSDF(UV - 0.5, vec2(0.49), radius);
	float smmothedAlpha = 1f - smoothstep(-edgeSoftness, edgeSoftness, abs(distance) - thickness);
	ALBEDO = mix(color, vec4(0.42, 0.48f, 0.61f, smmothedAlpha), smmothedAlpha).xyz;

	vec3 global_vertex = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;
	ALPHA_SCISSOR = 1.0;
	ALPHA = PointVsBox(global_vertex, clipBoxInverseTransform);
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/color = Color( 0.086, 0.2, 0.5, 1 )
shader_param/border = 0.02
shader_param/clipBoxInverseTransform = null

[sub_resource type="QuadMesh" id=10]

[node name="PressableButtonGodot" type="Spatial"]
script = ExtResource( 4 )

[node name="FrontPlate" type="MeshInstance" parent="."]
transform = Transform( 0.032, 0, 0, 0, 0.032, 0, 0, 0, 0.016, 0, 0, 0.008 )
layers = 3
material_override = SubResource( 2 )
mesh = SubResource( 3 )
material/0 = null

[node name="HighlightPlate" type="MeshInstance" parent="FrontPlate"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.5 )
layers = 4
material_override = SubResource( 5 )
mesh = SubResource( 6 )
material/0 = null

[node name="TouchableArea" type="Area" parent="."]
transform = Transform( 0.032, 0, 0, 0, 0.032, 0, 0, 0, 0.016, 0, 0, 0.016 )
collision_layer = 32
collision_mask = 0

[node name="CollisionShape" type="CollisionShape" parent="TouchableArea"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.5 )
shape = SubResource( 7 )

[node name="BackPlate" type="MeshInstance" parent="."]
transform = Transform( 0.032, 0, 0, 0, 0.032, 0, 0, 0, 0.01, 0, 0, 0 )
material_override = SubResource( 9 )
mesh = SubResource( 10 )
material/0 = null

[node name="ToolkitText" parent="." instance=ExtResource( 1 )]
